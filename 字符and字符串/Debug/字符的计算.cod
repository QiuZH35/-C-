; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	D:\vs2017Data\Restart study of c++\×Ö·ûand×Ö·û´®\×Ö·ûµÄ¼ÆËã.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__2CC6E67D_corecrt_stdio_config@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__A452D4A0_stdio@h DB 01H
__CBF05DFB_×Ö·ûand×Ö·û´®\×Ö·ûµÄ¼ÆËã@c DB 01H
msvcjmc	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_main111
PUBLIC	_main
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_03ILJCGOLJ@?6?$CFs@			; `string'
PUBLIC	??_C@_06BGLJFFEK@?G?q?$MA?O?J?$KG@		; `string'
PUBLIC	??_C@_0P@PKCPMOPO@title?5?$CFs?$LF?D?$LN?$NM?W?w@ ; `string'
PUBLIC	??_C@_0L@OCIBKBLC@color?5?$CFc?$CFc@		; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp__getchar:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__system:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0L@OCIBKBLC@color?5?$CFc?$CFc@
CONST	SEGMENT
??_C@_0L@OCIBKBLC@color?5?$CFc?$CFc@ DB 'color %c%c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PKCPMOPO@title?5?$CFs?$LF?D?$LN?$NM?W?w@
CONST	SEGMENT
??_C@_0P@PKCPMOPO@title?5?$CFs?$LF?D?$LN?$NM?W?w@ DB 'title %s', 0b5H, 0c4H
	DB	0bdH, 0dcH, 0d7H, 0f7H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BGLJFFEK@?G?q?$MA?O?J?$KG@
CONST	SEGMENT
??_C@_06BGLJFFEK@?G?q?$MA?O?J?$KG@ DB 0c7H, 0f1H, 0c0H, 0cfH, 0caH, 0a6H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03ILJCGOLJ@?6?$CFs@
CONST	SEGMENT
??_C@_03ILJCGOLJ@?6?$CFs@ DB 0aH, '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vs2017data\restart study of c++\×Ö·ûand×Ö·û´®\×Ö·ûµÄ¼ÆËã.c
;	COMDAT _main
_TEXT	SEGMENT
_ch$1 = -169						; size = 1
_str$2 = -160						; size = 100
_str1$3 = -49						; size = 1
_i$4 = -40						; size = 4
_i$5 = -28						; size = 4
_str$ = -16						; size = 5
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 70 01 00
	00		 sub	 esp, 368		; 00000170H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 90 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-368]
  00012	b9 5c 00 00 00	 mov	 ecx, 92			; 0000005cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __CBF05DFB_×Ö·ûand×Ö·û´®\×Ö·ûµÄ¼ÆËã@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 21   : 	char str[] = { 'c','a','l','c','\0' };

  00032	c6 45 f0 63	 mov	 BYTE PTR _str$[ebp], 99	; 00000063H
  00036	c6 45 f1 61	 mov	 BYTE PTR _str$[ebp+1], 97 ; 00000061H
  0003a	c6 45 f2 6c	 mov	 BYTE PTR _str$[ebp+2], 108 ; 0000006cH
  0003e	c6 45 f3 63	 mov	 BYTE PTR _str$[ebp+3], 99 ; 00000063H
  00042	c6 45 f4 00	 mov	 BYTE PTR _str$[ebp+4], 0

; 22   : 	printf("%s", str);

  00046	8d 45 f0	 lea	 eax, DWORD PTR _str$[ebp]
  00049	50		 push	 eax
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0004f	e8 00 00 00 00	 call	 _printf
  00054	83 c4 08	 add	 esp, 8

; 23   : 	for (int i = 0; i < 4; i++)

  00057	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$5[ebp], 0
  0005e	eb 09		 jmp	 SHORT $LN4@main
$LN2@main:
  00060	8b 45 e4	 mov	 eax, DWORD PTR _i$5[ebp]
  00063	83 c0 01	 add	 eax, 1
  00066	89 45 e4	 mov	 DWORD PTR _i$5[ebp], eax
$LN4@main:
  00069	83 7d e4 04	 cmp	 DWORD PTR _i$5[ebp], 4
  0006d	7d 14		 jge	 SHORT $LN3@main

; 24   : 	{
; 25   : 		str[i] += 1;

  0006f	8b 45 e4	 mov	 eax, DWORD PTR _i$5[ebp]
  00072	0f be 4c 05 f0	 movsx	 ecx, BYTE PTR _str$[ebp+eax]
  00077	83 c1 01	 add	 ecx, 1
  0007a	8b 55 e4	 mov	 edx, DWORD PTR _i$5[ebp]
  0007d	88 4c 15 f0	 mov	 BYTE PTR _str$[ebp+edx], cl

; 26   : 	}

  00081	eb dd		 jmp	 SHORT $LN2@main
$LN3@main:

; 27   : 	printf("\n%s", str);

  00083	8d 45 f0	 lea	 eax, DWORD PTR _str$[ebp]
  00086	50		 push	 eax
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_03ILJCGOLJ@?6?$CFs@
  0008c	e8 00 00 00 00	 call	 _printf
  00091	83 c4 08	 add	 esp, 8

; 28   : 	for (int i = 0; i < 4; i++)

  00094	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  0009b	eb 09		 jmp	 SHORT $LN7@main
$LN5@main:
  0009d	8b 45 d8	 mov	 eax, DWORD PTR _i$4[ebp]
  000a0	83 c0 01	 add	 eax, 1
  000a3	89 45 d8	 mov	 DWORD PTR _i$4[ebp], eax
$LN7@main:
  000a6	83 7d d8 04	 cmp	 DWORD PTR _i$4[ebp], 4
  000aa	7d 14		 jge	 SHORT $LN6@main

; 29   : 	{
; 30   : 		str[i] -= 1;

  000ac	8b 45 d8	 mov	 eax, DWORD PTR _i$4[ebp]
  000af	0f be 4c 05 f0	 movsx	 ecx, BYTE PTR _str$[ebp+eax]
  000b4	83 e9 01	 sub	 ecx, 1
  000b7	8b 55 d8	 mov	 edx, DWORD PTR _i$4[ebp]
  000ba	88 4c 15 f0	 mov	 BYTE PTR _str$[ebp+edx], cl

; 31   : 	}

  000be	eb dd		 jmp	 SHORT $LN5@main
$LN6@main:

; 32   : 	printf("\n%s", str);

  000c0	8d 45 f0	 lea	 eax, DWORD PTR _str$[ebp]
  000c3	50		 push	 eax
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_03ILJCGOLJ@?6?$CFs@
  000c9	e8 00 00 00 00	 call	 _printf
  000ce	83 c4 08	 add	 esp, 8

; 33   : 
; 34   : 	{
; 35   : 		char str1[] = { 0 };

  000d1	33 c0		 xor	 eax, eax
  000d3	88 45 cf	 mov	 BYTE PTR _str1$3[ebp], al

; 36   : 		sprintf(str1, "title %sµÄ½Ü×÷", "ÇñÀÏÊ¦");

  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_06BGLJFFEK@?G?q?$MA?O?J?$KG@
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PKCPMOPO@title?5?$CFs?$LF?D?$LN?$NM?W?w@
  000e0	8d 45 cf	 lea	 eax, DWORD PTR _str1$3[ebp]
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 _sprintf
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 37   : 		system(str1);

  000ec	8b f4		 mov	 esi, esp
  000ee	8d 45 cf	 lea	 eax, DWORD PTR _str1$3[ebp]
  000f1	50		 push	 eax
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__system
  000f8	83 c4 04	 add	 esp, 4
  000fb	3b f4		 cmp	 esi, esp
  000fd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 38   : 		
; 39   : 		char str[100] = { 0 }; //×Ö·û´®

  00102	6a 64		 push	 100			; 00000064H
  00104	6a 00		 push	 0
  00106	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _str$2[ebp]
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 _memset
  00112	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@main:

; 40   : 			while (1) {

  00115	b8 01 00 00 00	 mov	 eax, 1
  0011a	85 c0		 test	 eax, eax
  0011c	74 5e		 je	 SHORT $LN9@main

; 41   : 				for (char ch = '1'; ch <= '9'; ch++) //×Ö·û

  0011e	c6 85 57 ff ff
	ff 31		 mov	 BYTE PTR _ch$1[ebp], 49	; 00000031H
  00125	eb 0e		 jmp	 SHORT $LN12@main
$LN10@main:
  00127	8a 85 57 ff ff
	ff		 mov	 al, BYTE PTR _ch$1[ebp]
  0012d	04 01		 add	 al, 1
  0012f	88 85 57 ff ff
	ff		 mov	 BYTE PTR _ch$1[ebp], al
$LN12@main:
  00135	0f be 85 57 ff
	ff ff		 movsx	 eax, BYTE PTR _ch$1[ebp]
  0013c	83 f8 39	 cmp	 eax, 57			; 00000039H
  0013f	7f 39		 jg	 SHORT $LN11@main

; 42   : 				{
; 43   : 					sprintf(str, "color %c%c", ch, 'e'); //»ñÈ¡×Ö·ûÓ³Éäµ½ strÖÐ

  00141	6a 65		 push	 101			; 00000065H
  00143	0f be 85 57 ff
	ff ff		 movsx	 eax, BYTE PTR _ch$1[ebp]
  0014a	50		 push	 eax
  0014b	68 00 00 00 00	 push	 OFFSET ??_C@_0L@OCIBKBLC@color?5?$CFc?$CFc@
  00150	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _str$2[ebp]
  00156	51		 push	 ecx
  00157	e8 00 00 00 00	 call	 _sprintf
  0015c	83 c4 10	 add	 esp, 16			; 00000010H

; 44   : 					system(str);

  0015f	8b f4		 mov	 esi, esp
  00161	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _str$2[ebp]
  00167	50		 push	 eax
  00168	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__system
  0016e	83 c4 04	 add	 esp, 4
  00171	3b f4		 cmp	 esi, esp
  00173	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 45   : 				}

  00178	eb ad		 jmp	 SHORT $LN10@main
$LN11@main:

; 46   : 			}

  0017a	eb 99		 jmp	 SHORT $LN8@main
$LN9@main:

; 47   : 	}
; 48   : 	
; 49   : 	getchar();

  0017c	8b f4		 mov	 esi, esp
  0017e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__getchar
  00184	3b f4		 cmp	 esi, esp
  00186	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 50   : }

  0018b	52		 push	 edx
  0018c	8b cd		 mov	 ecx, ebp
  0018e	50		 push	 eax
  0018f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN18@main
  00195	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0019a	58		 pop	 eax
  0019b	5a		 pop	 edx
  0019c	5f		 pop	 edi
  0019d	5e		 pop	 esi
  0019e	5b		 pop	 ebx
  0019f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a2	33 cd		 xor	 ecx, ebp
  001a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a9	81 c4 70 01 00
	00		 add	 esp, 368		; 00000170H
  001af	3b ec		 cmp	 ebp, esp
  001b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b6	8b e5		 mov	 esp, ebp
  001b8	5d		 pop	 ebp
  001b9	c3		 ret	 0
  001ba	66 90		 npad	 2
$LN18@main:
  001bc	03 00 00 00	 DD	 3
  001c0	00 00 00 00	 DD	 $LN17@main
$LN17@main:
  001c4	f0 ff ff ff	 DD	 -16			; fffffff0H
  001c8	05 00 00 00	 DD	 5
  001cc	00 00 00 00	 DD	 $LN14@main
  001d0	cf ff ff ff	 DD	 -49			; ffffffcfH
  001d4	01 00 00 00	 DD	 1
  001d8	00 00 00 00	 DD	 $LN15@main
  001dc	60 ff ff ff	 DD	 -160			; ffffff60H
  001e0	64 00 00 00	 DD	 100			; 00000064H
  001e4	00 00 00 00	 DD	 $LN16@main
$LN16@main:
  001e8	73		 DB	 115			; 00000073H
  001e9	74		 DB	 116			; 00000074H
  001ea	72		 DB	 114			; 00000072H
  001eb	00		 DB	 0
$LN15@main:
  001ec	73		 DB	 115			; 00000073H
  001ed	74		 DB	 116			; 00000074H
  001ee	72		 DB	 114			; 00000072H
  001ef	31		 DB	 49			; 00000031H
  001f0	00		 DB	 0
$LN14@main:
  001f1	73		 DB	 115			; 00000073H
  001f2	74		 DB	 116			; 00000074H
  001f3	72		 DB	 114			; 00000072H
  001f4	00		 DB	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vs2017data\restart study of c++\×Ö·ûand×Ö·û´®\×Ö·ûµÄ¼ÆËã.c
;	COMDAT _main111
_TEXT	SEGMENT
_str$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_main111 PROC						; COMDAT

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __CBF05DFB_×Ö·ûand×Ö·û´®\×Ö·ûµÄ¼ÆËã@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 9    : 	char str[10] = { 'c','a','l','c','\0' };

  00032	c6 45 ec 63	 mov	 BYTE PTR _str$[ebp], 99	; 00000063H
  00036	c6 45 ed 61	 mov	 BYTE PTR _str$[ebp+1], 97 ; 00000061H
  0003a	c6 45 ee 6c	 mov	 BYTE PTR _str$[ebp+2], 108 ; 0000006cH
  0003e	c6 45 ef 63	 mov	 BYTE PTR _str$[ebp+3], 99 ; 00000063H
  00042	c6 45 f0 00	 mov	 BYTE PTR _str$[ebp+4], 0
  00046	33 c0		 xor	 eax, eax
  00048	89 45 f1	 mov	 DWORD PTR _str$[ebp+5], eax
  0004b	88 45 f5	 mov	 BYTE PTR _str$[ebp+9], al

; 10   : 	
; 11   : 	system(str);

  0004e	8b f4		 mov	 esi, esp
  00050	8d 45 ec	 lea	 eax, DWORD PTR _str$[ebp]
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__system
  0005a	83 c4 04	 add	 esp, 4
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 12   : 	
; 13   : 	printf("%s",str);

  00064	8d 45 ec	 lea	 eax, DWORD PTR _str$[ebp]
  00067	50		 push	 eax
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0006d	e8 00 00 00 00	 call	 _printf
  00072	83 c4 08	 add	 esp, 8

; 14   : 	getchar();

  00075	8b f4		 mov	 esi, esp
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__getchar
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 15   : 
; 16   : }

  00084	52		 push	 edx
  00085	8b cd		 mov	 ecx, ebp
  00087	50		 push	 eax
  00088	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@main111
  0008e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00093	58		 pop	 eax
  00094	5a		 pop	 edx
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000a8	3b ec		 cmp	 ebp, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
  000b3	90		 npad	 1
$LN5@main111:
  000b4	01 00 00 00	 DD	 1
  000b8	00 00 00 00	 DD	 $LN4@main111
$LN4@main111:
  000bc	ec ff ff ff	 DD	 -20			; ffffffecH
  000c0	0a 00 00 00	 DD	 10			; 0000000aH
  000c4	00 00 00 00	 DD	 $LN3@main111
$LN3@main111:
  000c8	73		 DB	 115			; 00000073H
  000c9	74		 DB	 116			; 00000074H
  000ca	72		 DB	 114			; 00000072H
  000cb	00		 DB	 0
_main111 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A452D4A0_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 __vsprintf_l
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00047	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A452D4A0_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00028	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00033	52		 push	 edx
  00034	6a ff		 push	 -1
  00036	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 __vsnprintf_l
  0003f	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -208						; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A452D4A0_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	83 ca 01	 or	 edx, 1
  00048	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004b	50		 push	 eax
  0004c	52		 push	 edx
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00053	83 c4 1c	 add	 esp, 28			; 0000001cH
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00060	83 7d f8 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00064	7d 0c		 jge	 SHORT $LN3@vsnprintf_
  00066	c7 85 30 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR tv74[ebp], -1
  00070	eb 09		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00072	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]
  00075	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0007b	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0008a	3b ec		 cmp	 ebp, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A452D4A0_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b f4		 mov	 esi, esp
  0003a	6a 01		 push	 1
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00042	83 c4 04	 add	 esp, 4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 __vfprintf_l
  00052	83 c4 10	 add	 esp, 16			; 00000010H
  00055	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  00058	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  0005f	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A452D4A0_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	51		 push	 ecx
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	52		 push	 edx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 644  :     }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2CC6E67D_corecrt_stdio_config@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00028	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
